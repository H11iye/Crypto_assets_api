name: CI/CD - Crypto Assets API

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  APP_NAME: crypto-assets-with-mcp
  REPO_NAME: ${{ secrets.GCP_REPO_NAME }} 
  TF_VERSION: '1.9.7'

jobs:
  # Security and code quality checks
  security-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          format: 'sarif'
          output: 'trivy-report.sarif'
          scan-type: 'fs'
          scan-ref: '.'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif
      
  # Test the job
  test:
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          pytest tests/ --cov=src --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests

  # Build and deploy job
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [security-checks, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write
      actions: read

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
  
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker auth for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet


    # # Verify gcloud authentication
    #   - name: Verify gcloud authentication
    #     run: |
    #       gcloud auth list

    # # Verify Artifact Registry access

    #   - name: Verify Artifact Registry access
    #     run: gcloud artifacts repositories list --location=${{ env.REGION }}

    #   - name: Configure Docker auth for Artifact Registry
    #     run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet


    # Build Docker image 
      - name: Build docker image
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.APP_NAME }}-api:${{ github.sha }}"
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

    # Push Docker image to Artifact Registry
      - name: Push Docker image to Artifact Registry
        run: docker push ${{ env.IMAGE }}

    # Install Terraform CLI
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

    # Apply terraform configuration to deploy the exact image to Cloud Run
      - name: Terraform format check
        run: |
          cd terraform
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="prefix=${{ env.APP_NAME }}"

      - name: Terraform plan
        run: |
          cd terraform
          terraform plan -var="image_tag=${{ github.sha }}" \
            -var="environment=prod" \
            -var="PROJECT_ID=${{ env.PROJECT_ID }}" \
            -var="REGION=${{ env.REGION }}" \
            -var="N8N_DB_PASSWORD=${{ secrets.N8N_DB_PASSWORD }}" \
            -var="N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY }}" \
            -var="CRYPTO_API_DB_URL=${{ secrets.CRYPTO_API_DB_URL }}" \
            -out=tfplan
          
      - name: Terraform apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get Cloud Run service URL
        run: |
          echo "checking crypto api health..."
          curl -f ${{ env.CRYPTO_API_URL }} /health || exit 1

          echo "checking n8n health..."
          curl -f ${{ env.N8N_URL }} /health || exit 1

      # - name: Notify Slack
      #   if: success()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author,action,eventName,ref,workflow
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback Job
  rollback:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: failure()
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Rollback to previous version
        run: |
          # Get the previous successful deployment image tag
          PREV_SHA=$(git rev-parse HEAD~1)

          # Deploy the previous version
          gcloud run deploy assets-${{ env.APP_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.APP_NAME }}-api:$PREV_SHA \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated

      - name: Notify Slack on Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure()
          fields: repo,message,commit,author,action,eventName,ref,workflow
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup Job
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Clean old images
        run: |
          # Keep only the last 10 images
          gcloud artifacts docker images list \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.APP_NAME }}-api \
            --format="value(version)" \
            --sort-by=~createTime | tail -n +11 | while read version; do
              gcloud artifacts docker images delete \
                ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.APP_NAME }}-api:$version \
                --quiet
            done

    # # Deploy to Cloud Run
    #   - name: Deploy the image
    #     run: |
    #       gcloud run deploy assets-${{ env.APP_NAME }} \
    #         --image ${{ env.IMAGE }} \
    #         --region ${{ env.REGION }} \
    #         --platform managed \
    #         --allow-unauthenticated
